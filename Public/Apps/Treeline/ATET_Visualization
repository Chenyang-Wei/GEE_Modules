/*******************************************************************************
 * Introduction *
 * 
 *  This script creates a Google Earth Engine App to visualize
 *    the dataset of Alpine Treeline Elevational Transects (ATETs)
 *    and the pertinent information.
 * 
 * Note: 
 *  The UI Pattern Template was provided by Tyler Erickson (tylere@google.com)
 *    and Justin Braaten (braaten@google.com) at Google.
 * 
 * Updated: 11/8/2023.
 * 
 * Author: Chenyang Wei (cwei5@buffalo.edu)
 ******************************************************************************/


/*******************************************************************************
 * Model *
 ******************************************************************************/

// Define a JSON object for storing the data model.
var m = {};

// Define an empty image of the "double" type.
m.emptyImg = ee.Image().double();

// Define the major file path.
m.filePath = "users/treeline/Global/Elevational_Transects/";

// Define an object for storing the FeatureCollections.
m.FtrCols = {};

// Define the transects.
m.FtrCols.ATETs = 
  ee.FeatureCollection(
    m.filePath
      + "Alpine_Treeline_Elevational_"
      + "Transects_v1_0")
  .map(function(transect_Ftr) {
    // Calculate the transect-level differences.
    var CHdiff = ee.Number(transect_Ftr.get("U_CanopyHt"))
      .subtract(transect_Ftr.get("L_CanopyHt"));
    var NDVIdiff = ee.Number(transect_Ftr.get("U_NDVI"))
      .subtract(transect_Ftr.get("L_NDVI"));
    
    return transect_Ftr.set({
      CHdiff: CHdiff,
      NDVIdiff: NDVIdiff
    });
  });
m.FtrCols.ATECs = 
  ee.FeatureCollection(
    m.filePath
      + "Alpine_Treeline_Elevational_"
      + "Transect_Centroids_v1_0");

// Define the GMBA mountains.
m.FtrCols.gmbaVCH = 
  ee.FeatureCollection(
    m.filePath
      + "Aggregation/"
      + "GMBAmeans_VCHdiff");
m.FtrCols.gmbaNDVI = 
  ee.FeatureCollection(
    m.filePath
      + "Aggregation/"
      + "GMBAmeans_NDVIdiff");

// Define the HYBAS watersheds.
m.FtrCols.hybasVCH = 
  ee.FeatureCollection(
    m.filePath
      + "Aggregation/"
      + "HYBASmeans_VCHdiff");
m.FtrCols.hybasNDVI = 
  ee.FeatureCollection(
    m.filePath
      + "Aggregation/"
      + "HYBASmeans_NDVIdiff");

// Define info about ATETs.
m.ATETinfo = {};
m.ATETinfo.regions = 
  m.FtrCols.gmbaVCH.aggregate_array("Regn_GMBA")
    .distinct().getInfo();
m.ATETinfo.mountains = 
  m.FtrCols.gmbaVCH.filter(
    ee.Filter.eq("Regn_GMBA", "North America"))
    .aggregate_array("Name_GMBA")
    .distinct().getInfo(); // Default value.

// Define the types of vegetation differences.
m.diffTypes = {
  'Canopy height difference (m)': {
    gmba: {
      data: m.FtrCols.gmbaVCH,
      varName: "Avg_CHdiff"
    },
    hybas: {
      data: m.FtrCols.hybasVCH,
      varName: "Avg_CHdiff"
    },
    ATET: {
      data: m.FtrCols.ATETs,
      varName: "CHdiff"
    },
    color: '#08306b',
    vis: {
      min: 0,
      max: -12,
      palette: ['#f7fbff','#deebf7','#c6dbef',
        '#9ecae1','#6baed6','#4292c6','#2171b5',
        '#08519c','#08306b']
    }
  },
  'NDVI difference': {
    gmba: {
      data: m.FtrCols.gmbaNDVI,
      varName: "Avg_VIdiff"
    },
    hybas: {
      data: m.FtrCols.hybasNDVI,
      varName: "Avg_VIdiff"
    },
    ATET: {
      data: m.FtrCols.ATETs,
      varName: "NDVIdiff"
    },
    color: '#00441b',
    vis: {
      min: 0,
      max: -0.3,
      palette: ['#f7fcf5','#e5f5e0','#c7e9c0',
        '#a1d99b','#74c476','#41ab5d','#238b45',
        '#006d2c','#00441b']
    }
  }
};

// print(m.FtrCols.gmbaNDVI.first())
// print(m.FtrCols.hybasNDVI.first())
// print(m.FtrCols.ATETs.first())
print(m.diffTypes)

/*******************************************************************************
 * Components *
 ******************************************************************************/

// Define a JSON object for storing UI components.
var c = {};

// Define a control panel for user input.
c.controlPanel = ui.Panel();

// Define a series of panel widgets to be used as horizontal dividers.
c.dividers = {};
c.dividers.divider1 = ui.Panel();
c.dividers.divider2 = ui.Panel();
c.dividers.divider3 = ui.Panel();
c.dividers.divider4 = ui.Panel();

// Define the main interactive map.
c.map = ui.Map();

// Define an app info widget group.
c.info = {};
c.info.titleLabel = 
  ui.Label(
    'Alpine Treeline Elevational Transects (ATETs)');
c.info.aboutLabel = 
  ui.Label(
    'Elevational transects constructed within '
      + 'global alpine treeline ecotones. '
      + 'Explore the data by clicking transects '
      + 'to inspect the pertinent information.');
c.info.paperLabel = 
  ui.Label({
    value: 'Read the paper',
    targetUrl: 'https://github.com/Chenyang-Wei'
  });
c.info.dataLabel = ui.Label({
  value: 'Download the data',
  targetUrl: 'https://twitter.com/Chenyang_Wei'
});
c.info.moreInfo = 
  ui.Panel({
    widgets: [
      c.info.paperLabel,
      c.info.dataLabel
    ],
    layout: ui.Panel.Layout.flow('horizontal')
  });
c.info.panel = 
  ui.Panel([
    c.info.titleLabel, 
    c.info.aboutLabel,
    c.info.moreInfo
  ]);

// Define a mountain zoom-in widget group.
c.zoomInMountain = {};
c.zoomInMountain.label = 
  ui.Label(
    'Select a mountain range to inspect:');
c.zoomInMountain.regionSelector = 
  ui.Select({
    items: m.ATETinfo.regions, 
    placeholder: "Select a region...",
    value: "North America"
  });
c.zoomInMountain.mountainSelector = 
  ui.Select({
    items: m.ATETinfo.mountains, 
    placeholder: "Select a mountain...",
    value: "Olympic Mountains"
  });
c.zoomInMountain.selectors = 
  ui.Panel({
    widgets: [
      c.zoomInMountain.regionSelector,
      c.zoomInMountain.mountainSelector
    ],
    layout: ui.Panel.Layout.flow('horizontal')
  });
c.zoomInMountain.panel = 
  ui.Panel([
    c.zoomInMountain.label, 
    c.zoomInMountain.selectors
  ]);

// Define a transect display widget group.
c.displayTransects = {};
c.displayTransects.label = 
  ui.Label(
    'Determine the raw data to display:');
c.displayTransects.transectCheckbox = 
  ui.Checkbox({
    label: "Transects (ATETs)", 
    value: true
  });
c.displayTransects.centroidCheckbox = 
  ui.Checkbox({
    label: "Centroids (ATECs)", 
    value: false
  });
c.displayTransects.checkboxes = 
  ui.Panel({
    widgets: [
      c.displayTransects.transectCheckbox,
      c.displayTransects.centroidCheckbox
    ],
    layout: ui.Panel.Layout.flow('horizontal')
  });
c.displayTransects.panel = 
  ui.Panel([
    c.displayTransects.label, 
    c.displayTransects.checkboxes
  ]);

// Define a vegetation difference visualization widget group.
c.visualizeVegeDiff = {};
c.visualizeVegeDiff.label = 
  ui.Label(
    'Visualize the elevational differences');
c.visualizeVegeDiff.diffSelector = 
  ui.Select({
    items: Object.keys(m.diffTypes), 
    placeholder: "Select a difference type...",
    value: "Canopy height difference (m)"
  });
c.visualizeVegeDiff.diffPanel = 
  ui.Panel([
    c.visualizeVegeDiff.label, 
    c.visualizeVegeDiff.diffSelector
  ]);
c.visualizeVegeDiff.levelLabel = 
  ui.Label(
    'Determine the spatial levels to display:');
c.visualizeVegeDiff.mountainCheckbox = 
  ui.Checkbox({
    label: "GMBA mountain ranges", 
    value: false
  });
c.visualizeVegeDiff.watershedCheckbox = 
  ui.Checkbox({
    label: "HydroSHEDS watersheds", 
    value: true
  });
c.visualizeVegeDiff.transectCheckbox = 
  ui.Checkbox({
    label: "Elevational transects", 
    value: false
  });
c.visualizeVegeDiff.levelPanel = 
  ui.Panel([
    c.visualizeVegeDiff.levelLabel, 
    c.visualizeVegeDiff.mountainCheckbox,
    c.visualizeVegeDiff.watershedCheckbox,
    c.visualizeVegeDiff.transectCheckbox,
  ]);
c.visualizeVegeDiff.panel = 
  ui.Panel([
    c.visualizeVegeDiff.diffPanel,
    c.visualizeVegeDiff.levelPanel
  ]);

// Define a legend widget group.
c.legend = {};
c.legend.title = 
  ui.Label();
c.legend.colorbar = 
  ui.Thumbnail(ee.Image.pixelLonLat().select(0));
c.legend.leftLabel = 
  ui.Label('[min]');
c.legend.centerLabel = 
  ui.Label();
c.legend.rightLabel = 
  ui.Label('[max]');
c.legend.labelPanel = 
  ui.Panel({
    widgets: [
      c.legend.leftLabel,
      c.legend.centerLabel,
      c.legend.rightLabel,
    ],
    layout: ui.Panel.Layout.flow('horizontal')
  });
c.legend.panel = 
  ui.Panel([
    c.legend.title,
    c.legend.colorbar,
    c.legend.labelPanel
  ]);

// Define a panel for displaying a chart.
c.chart = {};
c.chart.shownButton = 
  ui.Button('Hide chart');
c.chart.container = 
  ui.Panel();  // will hold the dynamically generated chart. 
c.chart.chartPanel = 
  ui.Panel([
    c.chart.shownButton, 
    c.chart.container
  ]);


print(c)


/*******************************************************************************
 * Composition *
 ******************************************************************************/

// Control panel.
c.controlPanel.add(c.info.panel);
c.controlPanel.add(c.dividers.divider1);
c.controlPanel.add(c.zoomInMountain.panel);
c.controlPanel.add(c.dividers.divider2);
c.controlPanel.add(c.displayTransects.panel);
c.controlPanel.add(c.dividers.divider3);
c.controlPanel.add(c.visualizeVegeDiff.panel);
c.controlPanel.add(c.dividers.divider4);

// Map panel.
c.map.add(c.legend.panel);
c.map.add(c.chart.chartPanel);

ui.root.clear();
ui.root.add(c.controlPanel);
ui.root.add(c.map);



/*******************************************************************************
 * Styling *
 ******************************************************************************/

// Define CSS-like class style properties for widgets; reusable styles.
var s = {};

s.opacityWhiteMed = {
  backgroundColor: 'rgba(255, 255, 255, 0.5)'
};
s.opacityWhiteNone = {
  backgroundColor: 'rgba(255, 255, 255, 0)'
};
s.aboutText = {
  fontSize: '13px',
  color: '505050'
};
s.widgetTitle = {
  fontSize: '15px',
  fontWeight: 'bold',
  margin: '8px 8px 4px 8px',
  color: '383838'
};
s.stretchHorizontal = {
  stretch: 'horizontal'
};
// s.noMargin = {
//   margin: '0px 0px 0px 0px'
// };
// s.noTopMargin = {
//   margin: '0px 8px 8px 8px'
// };
// s.smallBottomMargin = {
//   margin: '8px 8px 4px 8px'
// };
s.bigTopMargin = {
  margin: '24px 8px 8px 8px'
};
s.divider = {
  backgroundColor: 'F0F0F0',
  height: '4px',
  margin: '20px 0px'
};

// Set the styles of widgets in the control panel.
c.controlPanel.style()
  .set({
    width: '30%',
    padding: '0px'
  });

c.info.titleLabel.style()
  .set({
    fontSize: '20px',
    fontWeight: 'bold'
  });
c.info.titleLabel.style()
  .set(s.bigTopMargin);
c.info.aboutLabel.style()
  .set(s.aboutText);
c.info.moreInfo.style()
  .set(s.aboutText);
c.info.paperLabel.style()
  .set(s.stretchHorizontal);
c.info.dataLabel.style()
  .set(s.stretchHorizontal);

c.zoomInMountain.label.style()
  .set(s.widgetTitle);
c.zoomInMountain.regionSelector.style()
  .set(s.stretchHorizontal);
c.zoomInMountain.mountainSelector.style()
  .set(s.stretchHorizontal);

c.displayTransects.label.style()
  .set(s.widgetTitle);
c.displayTransects.transectCheckbox.style()
  .set(s.stretchHorizontal);
c.displayTransects.centroidCheckbox.style()
  .set(s.stretchHorizontal);

c.visualizeVegeDiff.label.style()
  .set(s.widgetTitle);
c.visualizeVegeDiff.diffSelector.style()
  .set(s.stretchHorizontal);

// Loop through setting divider style.
Object.keys(c.dividers).forEach(function(key) {
  c.dividers[key].style()
    .set(s.divider);
});

// Set the styles of widgets in the map panel.
c.map.style()
  .set({
    cursor: 'crosshair'
  });

c.map.setOptions("hybrid");

c.map.setControlVisibility({
  layerList: true, // false
  zoomControl: false,
  mapTypeControl: false, 
  fullscreenControl: false
});

c.legend.title.style()
  .set({
    fontWeight: 'bold',
    fontSize: '12px',
    color: '383838'
  });
c.legend.title.style()
  .set(s.opacityWhiteNone);
c.legend.colorbar.style()
  .set({
    stretch: 'horizontal',
    margin: '0px 8px',
    maxHeight: '20px'
  });
c.legend.leftLabel.style()
  .set({
    margin: '4px 8px',
    fontSize: '12px'
  });
c.legend.leftLabel.style()
  .set(s.opacityWhiteNone);
c.legend.centerLabel.style()
  .set({
    margin: '4px 8px',
    fontSize: '12px',
    textAlign: 'center',
    stretch: 'horizontal'
  });
c.legend.centerLabel.style()
  .set(s.opacityWhiteNone);
c.legend.rightLabel.style()
  .set({
    margin: '4px 8px',
    fontSize: '12px'
  });
c.legend.rightLabel.style()
  .set(s.opacityWhiteNone);
c.legend.panel.style()
  .set({
    position: 'bottom-right',
    width: '30%',
    padding: '0px'
  });
c.legend.panel.style()
  .set(s.opacityWhiteMed);
c.legend.labelPanel.style()
  .set(s.opacityWhiteNone);


/*******************************************************************************
 * Behaviors *
 ******************************************************************************/

// Handles updating the mountain selector 
//  when region selector changes.
function updateMountainSelector() {
  var regionName = c.zoomInMountain.regionSelector
    .getValue();

  var mountains = m.FtrCols.gmbaVCH
    .filter(ee.Filter.eq("Regn_GMBA", regionName))
    .aggregate_array("Name_GMBA")
    .distinct().getInfo();

  c.zoomInMountain.mountainSelector
    .items().reset(mountains);
}

// Handles zooming in the selected mountain.
function zoomInMountain() {
  // Get the name of the selected mountain.
  var mountainName = c.zoomInMountain.mountainSelector
    .getValue();
  
  // Locate the selected ATETs.
  var selectedATETs = 
    m.FtrCols.ATETs.filter(
      ee.Filter.eq("GMBA_Name", mountainName));
  
  // Center the map.
  c.map.centerObject(
    ee.FeatureCollection(selectedATETs).first(), 8);
}

// Handles updating the display of transects.
function updateTransectDisplay() {
  // Get the state of the raw transect checkbox.
  var transectChecked = c.displayTransects.transectCheckbox
    .getValue();

  // Create a layer of transects.
  var globalATETs_Layer = ui.Map.Layer(
    m.FtrCols.ATETs, {color: "ff0000"}, 
    "Global ATETs")
    .setShown(transectChecked);

  // Update the map layer.
  c.map.layers().set(3, globalATETs_Layer);
}

// Handles updating the checkbox of 
//  transect-level difference.
function updateTransectDiffCheckbox() {
  // Get the state of the raw transect checkbox.
  var transectChecked = 
    c.displayTransects.transectCheckbox
    .getValue();

  // Get the original state of the difference checkbox.
  var originalState = 
    c.visualizeVegeDiff.transectCheckbox
    .getValue();

  // Update the state of the difference checkbox.
  c.visualizeVegeDiff.transectCheckbox
    .setValue(ee.Algorithms.If({
      condition: transectChecked, 
      trueCase: false, 
      falseCase: originalState
    }).getInfo());
}

// Handles updating the display of centroids.
function updateCentroidDisplay() {
  // Get the state of the raw centroid checkbox.
  var centroidChecked = c.displayTransects.centroidCheckbox
    .getValue();

  // Create a layer of centroids.
  var globalATECs_Layer = ui.Map.Layer(
    m.FtrCols.ATECs, {color: "ffff00"}, 
    "Global ATECs")
    .setShown(centroidChecked);

  // Update the map layer.
  c.map.layers().set(4, globalATECs_Layer);
}

// Handles updating the display of mountain-level difference.
function updateMountainDifference() {
  // Get the selected difference type.
  var differenceType = 
    c.visualizeVegeDiff.diffSelector
    .getValue();
  
  // Determine the difference dataset.
  var differenceDataset = 
    m.diffTypes[differenceType].gmba.data;

  // Determine the difference variable.
  var differenceVariable = 
    m.diffTypes[differenceType].gmba.varName;
  
  // Get the state of the checkbox.
  var differenceChecked = 
    c.visualizeVegeDiff.mountainCheckbox
    .getValue();

  // Create a layer of the difference.
  var difference_Img = m.emptyImg
    .paint(differenceDataset, differenceVariable);
  var difference_Layer = ui.Map.Layer(
    difference_Img, 
    m.diffTypes[differenceType].vis, 
    differenceType + " (mountain level)")
    .setShown(differenceChecked);

  // Update the map layer.
  c.map.layers().set(0, difference_Layer);
}

// Handles updating the display of watershed-level difference.
function updateWatershedDifference() {
  // Get the selected difference type.
  var differenceType = 
    c.visualizeVegeDiff.diffSelector
    .getValue();
  
  // Determine the difference dataset.
  var differenceDataset = 
    m.diffTypes[differenceType].hybas.data;

  // Determine the difference variable.
  var differenceVariable = 
    m.diffTypes[differenceType].hybas.varName;
  
  // Get the state of the checkbox.
  var differenceChecked = 
    c.visualizeVegeDiff.watershedCheckbox
    .getValue();

  // Create a layer of the difference.
  var difference_Img = m.emptyImg
    .paint(differenceDataset, differenceVariable);
  var difference_Layer = ui.Map.Layer(
    difference_Img, 
    m.diffTypes[differenceType].vis, 
    differenceType + " (watershed level)")
    .setShown(differenceChecked);

  // Update the map layer.
  c.map.layers().set(1, difference_Layer);
}

// Handles updating the display of transect-level difference.
function updateTransectDifference() {
  // Get the selected difference type.
  var differenceType = 
    c.visualizeVegeDiff.diffSelector
    .getValue();
  
  // Determine the difference dataset.
  var differenceDataset = 
    m.diffTypes[differenceType].ATET.data;

  // Determine the difference variable.
  var differenceVariable = 
    m.diffTypes[differenceType].ATET.varName;
  
  // Get the state of the checkbox.
  var differenceChecked = 
    c.visualizeVegeDiff.transectCheckbox
    .getValue();

  // Create a layer of the difference.
  var difference_Img = m.emptyImg
    .paint(differenceDataset, differenceVariable)
    .paint(differenceDataset, differenceVariable, 1);
  var difference_Layer = ui.Map.Layer(
    difference_Img, 
    m.diffTypes[differenceType].vis, 
    differenceType + " (transect level)")
    .setShown(differenceChecked);

  // Update the map layer.
  c.map.layers().set(2, difference_Layer);
}

// Handles updating the checkbox of 
//  the raw transects.
function updateRawTransectCheckbox() {
  // Get the state of the transect-level 
  //  difference checkbox.
  var differenceChecked = 
    c.visualizeVegeDiff.transectCheckbox
    .getValue();

  // Get the original state of the raw transect checkbox.
  var originalState = 
    c.displayTransects.transectCheckbox
    .getValue();

  // Update the state of the raw transect checkbox.
  c.displayTransects.transectCheckbox
    .setValue(ee.Algorithms.If({
      condition: differenceChecked, 
      trueCase: false, 
      falseCase: originalState
    }).getInfo());
}

// Handles drawing the legend 
//  when difference selector changes.
function updateLegend() {
  c.legend.title.setValue(
    c.visualizeVegeDiff.diffSelector.getValue());
  c.legend.colorbar.setParams({
    bbox: [0, 0, 1, 0.1],
    dimensions: '100x10',
    format: 'png',
    min: 1,
    max: 0,
    palette: m.diffTypes[
      c.visualizeVegeDiff.diffSelector.getValue()]
      .vis.palette
  });
  c.legend.leftLabel.setValue(
    m.diffTypes[
      c.visualizeVegeDiff.diffSelector.getValue()]
      .vis.max);
  c.legend.centerLabel.setValue(
    m.diffTypes[
      c.visualizeVegeDiff.diffSelector.getValue()]
      .vis.max / 2);
  c.legend.rightLabel.setValue(
    m.diffTypes[
      c.visualizeVegeDiff.diffSelector.getValue()]
      .vis.min);
}

// Handles map clicks for charting.
function drawChart(coords) {
  // Get out if call to drawChart did not come from 
  //  map click and the chart has not been drawn previously.
  if (!coords.lon) {
    return null;
  }
  
  // Get out if the clicked point intersects any transect.
  var point = ee.Geometry.Point([coords.lon, coords.lat])
    .buffer(45);
  var clicked = m.FtrCols.ATETs.filterBounds(point);
  if (clicked.size().getInfo() === 0) {
    return null;
  }
  
  // Show the chart panel if this is the first time 
  //  a point is clicked.
  if (!c.chart.chartPanel.style().get('shown')) {
    c.chart.chartPanel.style().set('shown', true);
  }
  
  // Show chart if hidden; assuming user wants to 
  //  see updates to chart.
  if (c.chart.shownButton.getLabel() == 'Show chart') {
    c.chart.container.style().set({shown: true});
    c.chart.shownButton.setLabel('Hide chart');
  }

  var layer = ui.Map.Layer(
    point, {color: "0000ff"}, 'Clicked point');
  c.map.layers().set(5, layer);

  var styleChartAxis = {
    italic: false,
    bold: true
  };
  var styleChartArea = {
    width: '600px',
    height: '255px',
    margin: '0px',
    padding: '0px'
  }; 
  
  // Generate a chart.
  var clickedTransect = clicked
    .first();
  
  print(clicked.size())
  // var chart = ui.Chart.image.series({
  //   imageCollection: m.col.select(
  //     getPropertyValueList(m.imgInfo.bands, 'bname')),
  //   region: point.buffer(radius),
  //   reducer: ee.Reducer.mean(),
  //   scale: m.col.first().projection().nominalScale()
  // })
  // .setSeriesNames(Object.keys(m.imgInfo.bands))
  // .setChartType('ColumnChart')
  // .setOptions({
  //   titlePosition: 'none',
  //   colors: getPropertyValueList(m.imgInfo.bands, 'color'),
  //   hAxis: {
  //     title: 'Year',
  //     titleTextStyle: styleChartAxis
  //   },
  //   vAxis: {
  //     title: 'Stacked percent cover',
  //     titleTextStyle: styleChartAxis,
  //   },
  //   legend: {maxLines: 2},
  //   isStacked: 'percent'
  // });
  
  // chart.style().set(styleChartArea);
  
  // c.chart.container.widgets().reset([chart]);
}

// Handles showing/hiding the chart panel.
function showHideChart() {
  var shown = true;
  var label = 'Hide chart';
  if (c.chart.shownButton.getLabel() == 'Hide chart') {
    shown = false;
    label = 'Show chart';
  }
  c.chart.container.style().set({shown: shown});
  c.chart.shownButton.setLabel(label);
}


// Zoom-in panel.
c.zoomInMountain.regionSelector
  .onChange(updateMountainSelector);
c.zoomInMountain.mountainSelector
  .onChange(zoomInMountain);

// Transect/centroid panel.
c.displayTransects.transectCheckbox
  .onChange(updateTransectDisplay);
c.displayTransects.transectCheckbox
  .onChange(updateTransectDiffCheckbox);
c.displayTransects.centroidCheckbox
  .onChange(updateCentroidDisplay);

// Difference type panel
c.visualizeVegeDiff.diffSelector
  .onChange(updateMountainDifference);
c.visualizeVegeDiff.diffSelector
  .onChange(updateWatershedDifference);
c.visualizeVegeDiff.diffSelector
  .onChange(updateTransectDifference);
c.visualizeVegeDiff.diffSelector
  .onChange(updateLegend);

// Difference level panel.
c.visualizeVegeDiff.mountainCheckbox
  .onChange(updateMountainDifference);
c.visualizeVegeDiff.watershedCheckbox
  .onChange(updateWatershedDifference);
c.visualizeVegeDiff.transectCheckbox
  .onChange(updateTransectDifference);
c.visualizeVegeDiff.transectCheckbox
  .onChange(updateRawTransectCheckbox);

// Map panel.
c.map.onClick(drawChart);
c.chart.shownButton.onClick(showHideChart);


/*******************************************************************************
 * Initialize *
 ******************************************************************************/

// Vegetation differences.
updateMountainDifference();
updateWatershedDifference();
updateTransectDifference();
updateRawTransectCheckbox();
updateLegend();

// Raw datasets/centroids.
updateTransectDisplay();
updateTransectDiffCheckbox();
updateCentroidDisplay();

// Map center.
zoomInMountain();
